//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACTransit.DataAccess.Employee
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    using ACTransit.Entities.Employee;
    public partial class EmployeeEntities : DbContext
    {
        public EmployeeEntities()
            : base("name=EmployeeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeesLocation> EmployeesLocations { get; set; }
        public virtual DbSet<EmployeeAll> EmployeeAlls { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<VContacts_list> VContacts_list { get; set; }
    
        public virtual ObjectResult<GetEmployeesForEllipse_Result> GetEmployeesForEllipse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesForEllipse_Result>("GetEmployeesForEllipse");
        }
    
        public virtual ObjectResult<string> GetOrgChart(Nullable<System.DateTime> startDate, Nullable<bool> deptOnly, Nullable<bool> hasAccess, Nullable<bool> jSONOutput)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var deptOnlyParameter = deptOnly.HasValue ?
                new ObjectParameter("DeptOnly", deptOnly) :
                new ObjectParameter("DeptOnly", typeof(bool));
    
            var hasAccessParameter = hasAccess.HasValue ?
                new ObjectParameter("HasAccess", hasAccess) :
                new ObjectParameter("HasAccess", typeof(bool));
    
            var jSONOutputParameter = jSONOutput.HasValue ?
                new ObjectParameter("JSONOutput", jSONOutput) :
                new ObjectParameter("JSONOutput", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOrgChart", startDateParameter, deptOnlyParameter, hasAccessParameter, jSONOutputParameter);
        }
    }
}
