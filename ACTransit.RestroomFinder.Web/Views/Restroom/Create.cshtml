@using ACTransit.RestroomFinder.Web.Models

@model RestroomViewModel

@section Head {
    @Styles.Render("~/Content/magicsuggestcss")

    <style>
        .fa-spin-custom, .glyphicon-spin {
            -webkit-animation: spin 1000ms infinite linear;
            animation: spin 1000ms infinite linear;
        }

        .btn.btn-spinner {
            background-color: rgb(104, 145, 162);
            padding: 0px;
            font-weight: 700;
            font-size: 14px;
            height: 36px;
            -moz-border-radius: 3px;
            -webkit-border-radius: 3px;
            border-radius: 3px;
            border: none;
            -o-transition: all 0.218s;
            -moz-transition: all 0.218s;
            -webkit-transition: all 0.218s;
            transition: all 0.218s;
        }
    </style>
}

@{
    ViewBag.Title = "Create Restroom";
}

<h2>Create Restroom</h2>

@using (Html.BeginForm("Create", "Restroom", FormMethod.Post, new { id = "createRestroomForm" }))
{
    var currentRestroom = Model.CurrentRestroom;
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.CurrentRestroom.State, currentRestroom.State)
    @Html.HiddenFor(model => model.CurrentRestroom.LatDec, currentRestroom.LatDec)
    @Html.HiddenFor(model => model.CurrentRestroom.LongDec, currentRestroom.LongDec)
    @Html.HiddenFor(model => Model.CurrentRestroom.ToiletGenderId)
    @Html.HiddenFor(model => model.CurrentRestroom.StatusListId)
    @Html.HiddenFor(model => model.CurrentRestroom.Country)

    <div class="form-group">
        @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.RestroomName, currentRestroom.RestroomName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => Model.CurrentRestroom.RestroomName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Restroom Type", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.CurrentRestroom.RestroomType, RestroomViewModel.RestroomTypes, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.RestroomType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("ID No", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.LabelId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.LabelId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.CurrentRestroom.StatusListId, RestroomViewModel.Statuses, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.StatusListId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Has Toilet", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownList("CurrentRestroom.IsToiletAvailable", RestroomViewModel.ToiletOptions, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.IsToiletAvailable, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Toilet Gender", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @foreach (var gender in Model.ToiletGenders)
            {
                <span style="padding-right: 5px;">
                    @Html.CheckBoxFor(model => gender.Selected, new { id = gender.Value, @class = "toiletGender" })
                    @Html.DisplayFor(model => gender.Text)
                </span>
            }
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Visibility", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.CurrentRestroom.IsPublic, RestroomViewModel.Scopes, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.IsPublic, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-2"></div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div style="vertical-align: middle;">
                        <b>Location</b>&nbsp;
                        <a type="button" id="ShowMap" class="btn" style="padding-left:0px; margin-top: -20px; float:right;" href="#MapContainer" data-toggle="modal">
                            <img src="~/Content/Images/location-icon-48px.png" style="padding: 0; margin: 0; height: 40px; width: 40px;" title="Search On Map" />
                        </a>
                    </div>
                </div>
                <div class="panel-body">

                    <div class="form-group">
                        @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.CurrentRestroom.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address..." } })
                            @Html.ValidationMessageFor(model => model.CurrentRestroom.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("City", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.CurrentRestroom.City, new { htmlAttributes = new { @class = "form-control", placeholder = "City..." } })
                            @Html.ValidationMessageFor(model => Model.CurrentRestroom.City, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Zip", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.CurrentRestroom.Zip, new { htmlAttributes = new { @class = "form-control", placeholder = "Zip Code..." } })
                            @Html.ValidationMessageFor(model => Model.CurrentRestroom.Zip, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Restroom Contact", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="panel panel-default">
                @Html.HiddenFor(model => Model.CurrentRestroom.ContactId)
                <div class="panel-body">
                    <div class="form-group">
                        @Html.Label("Service Provider (Owner)", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_ServiceProvider", "", new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Contact Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Name", "", new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Title", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Title", "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Email", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Email", "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Phone", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Phone", "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Address", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Address", "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Notes", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            @Html.TextBox("CurrentContact_Notes", "", new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Duties", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    @Html.HiddenFor(model => Model.CurrentRestroom.CleanedContactId)
                    @Html.HiddenFor(model => Model.CurrentRestroom.RepairedContactId)
                    @Html.HiddenFor(model => Model.CurrentRestroom.SuppliedContactId)
                    @Html.HiddenFor(model => Model.CurrentRestroom.SecurityGatesContactId)
                    @Html.HiddenFor(model => Model.CurrentRestroom.SecurityLocksContactId)
                    <div class="form-inline form-group" style="display:flex;">
                        <div class="col-md-2">
                            <div style="padding-top: 4px;">
                                <span>Clean</span>
                                @Html.CheckBox("CleanedContact", Model.CurrentRestroom.CleanedContactId != null && Model.CurrentRestroom.CleanedContactId != 0, "")
                            </div>
                        </div>
                        <span style="padding-top: 4px;">Service Provider</span>
                        <div class="col-md-4">
                            @Html.TextBox("CurrentRestroom_CleanedContact", "", new { @class = "form-control", style = "width: 100%" })
                        </div>
                    </div>
                    <div class="form-inline form-group" style="display:flex;">
                        <div class="col-md-2">
                            <div style="padding-top: 4px;">
                                <span>Repair</span>
                                @Html.CheckBox("RepairedContact", Model.CurrentRestroom.RepairedContactId != null && Model.CurrentRestroom.RepairedContactId != 0, "")
                            </div>
                        </div>
                        <span style="padding-top: 4px;">Service Provider</span>
                        <div class="col-md-4">
                            @Html.TextBox("CurrentRestroom_RepairedContact", "", new { @class = "form-control", style = "width: 100%" })
                        </div>
                    </div>
                    <div class="form-inline form-group" style="display:flex;">
                        <div class="col-md-2">
                            <div style="padding-top: 4px;">
                                <span>Supply</span>
                                @Html.CheckBox("SuppliedContact", Model.CurrentRestroom.SuppliedContactId != null && Model.CurrentRestroom.SuppliedContactId != 0, "")
                            </div>
                        </div>
                        <span style="padding-top: 4px;">Service Provider</span>
                        <div class="col-md-4">
                            @Html.TextBox("CurrentRestroom_SuppliedContact", "", new { @class = "form-control", style = "width: 100%" })
                        </div>
                    </div>
                    <div class="form-inline form-group" style="display:flex;">
                        <div class="col-md-2">
                            <div style="padding-top: 4px;">
                                <span>Security/Gates</span>
                                @Html.CheckBox("SecurityGatesContact", Model.CurrentRestroom.SecurityGatesContactId != null && Model.CurrentRestroom.SecurityGatesContactId != 0, "")
                            </div>
                        </div>
                        <span style="padding-top: 4px;">Service Provider</span>
                        <div class="col-md-4">
                            @Html.TextBox("CurrentRestroom_SecurityGatesContact", "", new { @class = "form-control", style = "width: 100%" })
                        </div>
                    </div>
                    <div class="form-inline form-group" style="display:flex;">
                        <div class="col-md-2">
                            <div style="padding-top: 4px;">
                                <span>Security/Locks</span>
                                @Html.CheckBox("SecurityLocksContact", Model.CurrentRestroom.SecurityLocksContactId != null && Model.CurrentRestroom.SecurityLocksContactId != 0, "")
                            </div>
                        </div>
                        <span style="padding-top: 4px;">Service Provider</span>
                        <div class="col-md-4">
                            @Html.TextBox("CurrentRestroom_SecurityLocksContact", "", new { @class = "form-control", style = "width: 100%" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Has Drinking Water", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.DropDownListFor(model => model.CurrentRestroom.DrinkingWater, RestroomViewModel.DrinkingWaterOptions, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.DrinkingWater, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.Label("Contact", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.CurrentRestroom.ContactId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CurrentRestroom.ContactId, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        @Html.Label("Routes", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.ACTRoute, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.ACTRoute, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Weekday Hours", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.WeekdayHours, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.WeekdayHours, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Saturday Hours", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.SaturdayHours, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.SaturdayHours, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Sunday Hours", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.SundayHours, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.SundayHours, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Notes/ Access Codes/ Special Instructions", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.CurrentRestroom.Note, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CurrentRestroom.Note, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="button" class="btn btn-primary" id="btnCreate">Create</button>
        </div>
    </div>
</div>
}

<div class="modal fade" id="MapContainer" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Select the desired location on the map</h4>
            </div>
            <div id="restroom-map-canvas" class="google-map modal-body" style="height:500px;"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="UseCurrentLocation">Use Current Location</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="CloseWindow">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="RouteWaitDialog" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Reading Route Information</h4>
            </div>
            <div class="modal-body" style="height:100px;">
                <div id="suggestions_searching">
                    <img src="~/Content/Images/ajax-loader.gif" style="border:0;" />&nbsp;&nbsp;Retrieving route suggestions...
                </div>
                <div id="no_suggestions_found" style="display:none; text-align:center;">
                    <div>
                        No route suggestions found for this location
                    </div>
                    <div>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" id="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index", new
{
    searchName = Session["SearchName"],
    searchAddress = Session["SearchAddress"],
    searchCity = Session["SearchCity"],
    searchRouteSelection = Session["SearchRoutes"],
    sorField = Session["SortField"],
    sortDirection = Session["SortDirection"],
    page = Session["page"],
    statusId = Session["StatusId"],
    showPublic = Session["ShowPublic"],
    showToilet = Session["ShowToilet"],
    showPendingReview = Session["ShowPendingReview"]
})
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/magicsuggest")
    @Scripts.Render("~/bundles/mapviewer")

    <script src="~/Scripts/site.js"></script>

    <script>

        var isAddressChange = false;
        var routeSuggest = null;
        var contactSuggestByServiceProvider = null;
        var contactSuggestByName = null;
        var cleanedContactSuggest = null;
        var repairedContactSuggest = null;
        var suppliedContactSuggest = null;
        var securityGatesContactSuggest = null;
        var securityLocksContactSuggest = null;
        var restroomContacts = @Html.Raw(Json.Encode(Model.RestroomContacts));
        $(document).ready(function () {

            if (!("url" in window) && ("webkitURL" in window)) {
                window.URL = window.webkitURL;
            }

            if ($("#CurrentRestroom_IsToiletAvailable").val() === 'False') {
                $('input.toiletGender').prop('checked', false).change();
                $('input.toiletGender').prop('disabled', true);
            }

            $("#CurrentRestroom_IsToiletAvailable").change(function () {
                var val = this.value;
                if (val === 'False') {
                    $('input.toiletGender').prop('checked', false).change();
                    $('input.toiletGender').prop('disabled', true);
                } else if (val === 'True') {
                    $('input.toiletGender').prop('disabled', false);
                }
            });

            $('input.toiletGender').on('change', function () {
                var genderId = 0;
                $('input.toiletGender:checked').each(function() {
                    genderId = genderId | $(this).attr('id');
                });
                $('#CurrentRestroom_ToiletGenderId').val(genderId);
            });

            //Set MagicSuggest component
            routeSuggest = $("#CurrentRestroom_ACTRoute").magicSuggest({
                data: window.homeUrl + 'restroom/getallroutes',
                maxSelection: null,
                maxSuggestions: 10,
                maxEntryLength: 5,
                valueField: "Item1",
                displayField: "Item2"
            });

            //Set name to be used during post
            routeSuggest.setName("CurrentRestroom.SelectedRoutes");

            var options = {
                data: restroomContacts,
                allowFreeEntries: false,
                hideTrigger: true,
                placeholder: 'Type here',
                maxSelection: 1,
                maxSuggestions: 5,
                maxEntryLength: 10,
                valueField: "ContactId",
                displayField: "ServiceProvider"
            };

            //Set MagicSuggest component
            cleanedContactSuggest = $("#CurrentRestroom_CleanedContact").magicSuggest(options);
            repairedContactSuggest = $("#CurrentRestroom_RepairedContact").magicSuggest(options);
            suppliedContactSuggest = $("#CurrentRestroom_SuppliedContact").magicSuggest(options);
            securityGatesContactSuggest = $("#CurrentRestroom_SecurityGatesContact").magicSuggest(options);
            securityLocksContactSuggest = $("#CurrentRestroom_SecurityLocksContact").magicSuggest(options);
            contactSuggestByServiceProvider = $("#CurrentContact_ServiceProvider").magicSuggest(options);
            contactSuggestByName = $("#CurrentContact_Name").magicSuggest(options, options.displayField = 'Name');

            $(cleanedContactSuggest).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    changeDutiesCheckbox(serviceProvider, '#CleanedContact', '#CurrentRestroom_CleanedContactId');
                });

            $(repairedContactSuggest).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    changeDutiesCheckbox(serviceProvider, '#RepairedContact', '#CurrentRestroom_RepairedContactId');
                });

            $(suppliedContactSuggest).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    changeDutiesCheckbox(serviceProvider, '#SuppliedContact', '#CurrentRestroom_SuppliedContactId');
                });

            $(securityGatesContactSuggest).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    changeDutiesCheckbox(serviceProvider, '#SecurityGatesContact', '#CurrentRestroom_SecurityGatesContactId');
                });

            $(securityLocksContactSuggest).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    changeDutiesCheckbox(serviceProvider, '#SecurityLocksContact', '#CurrentRestroom_SecurityLocksContactId');
                });

            function changeDutiesCheckbox(serviceProvider, checkboxId, contactId) {
                if (serviceProvider.length > 0) {
                    var contact = serviceProvider[0];
                    $(contactId).val(contact['ContactId']);
                    $(checkboxId).prop('checked', true);
                } else {
                    $(contactId).val(0);
                    $(checkboxId).prop('checked', false);
                }
            }

            $(contactSuggestByServiceProvider).on('selectionchange',
                function () {
                    var serviceProvider = this.getSelection();
                    var contactName = contactSuggestByName.getSelection();

                    if (serviceProvider.length > 0) {
                        var contact = serviceProvider[0];
                        if (contactName.length === 0) {
                            contactSuggestByName.setSelection(contact);
                            setRestroomContactInfo(contact);
                        }
                    } else if (contactName.length !== 0) {
                        contactSuggestByName.clear();
                        clearRestroomContactInfo();
                    }
                });

            $(contactSuggestByName).on('selectionchange',
                function () {
                    var contactName = this.getSelection();
                    var serviceProvider = contactSuggestByServiceProvider.getSelection();
                    if (contactName.length > 0) {
                        var contact = contactName[0];
                        if (serviceProvider.length === 0) {
                            contactSuggestByServiceProvider.setSelection(contact);
                            setRestroomContactInfo(contact);
                        }
                    } else if (serviceProvider.length !== 0) {
                        contactSuggestByServiceProvider.clear();
                        clearRestroomContactInfo();
                    }
                });

            function setRestroomContactInfo(contact) {
                $('#CurrentRestroom_ContactId').val(contact['ContactId']);
                $('#CurrentContact_Title').val(contact['Title']);
                $('#CurrentContact_Email').val(contact['Email']);
                $('#CurrentContact_Phone').val(contact['Phone']);
                $('#CurrentContact_Address').val(contact['Address']);
                $('#CurrentContact_Notes').val(contact['Notes']);
            }

            function clearRestroomContactInfo() {
                $('#CurrentRestroom_ContactId').val(0);
                $('#CurrentContact_Title').val('');
                $('#CurrentContact_Email').val('');
                $('#CurrentContact_Phone').val('');
                $('#CurrentContact_Address').val('');
                $('#CurrentContact_Notes').val('');
            }

            $('#CleanedContact').click(function () {
                if (!$(this).is(':checked')) {
                    cleanedContactSuggest.clear();
                }
            });
            $('#RepairedContact').click(function () {
                if (!$(this).is(':checked')) {
                    repairedContactSuggest.clear();
                }
            });
            $('#SuppliedContact').click(function () {
                if (!$(this).is(':checked')) {
                    suppliedContactSuggest.clear();
                }
            });
            $('#SecurityGatesContact').click(function () {
                if (!$(this).is(':checked')) {
                    securityGatesContactSuggest.clear();
                }
            });
            $('#SecurityLocksContact').click(function () {
                if (!$(this).is(':checked')) {
                    securityLocksContactSuggest.clear();
                }
            });

            $('#MapContainer').on('show.bs.modal', function (e) {

                if ($('#CurrentRestroom_Address').val() && $('#CurrentRestroom_City').val()) {

                    mapOptions.startAddress = {
                        streetAddress: $('#CurrentRestroom_Address').val().concat(",").concat($('#CurrentRestroom_City').val()).concat(",").concat($('#CurrentRestroom_State').val()).concat(",").concat($('#CurrentRestroom_Zip').val()),
                        lat: $('#CurrentRestroom_LatDec').val(),
                        lng: $('#CurrentRestroom_LongDec').val()
                    };
                }
                else {
                    //Use GO location as default
                    mapOptions.startAddress = { streetAddress: '1600 Franklin St, Oakland', lat: 37.80566760423034, lng: -122.26885564694368 };
                }

                AcTransitMap.FindMe.start(mapOptions);
            });

            $('#UseCurrentLocation').click(function () {

                $('#MapContainer').modal('hide');

                //Parse raw address
                var indexOffset = 0;
                const address = AcTransitMap.FindMe.info.getContent().split(',');

                //Sometimes, for known locations, the address returned by Google Maps contains the name of the place which should be discarded
                if (address.length > 3)
                    indexOffset = 1;

                $('#CurrentRestroom_Address').val($.trim(address[0 + indexOffset]));
                $('#CurrentRestroom_City').val($.trim(address[1 + indexOffset]));
                $('#CurrentRestroom_State').val($.trim(address[2 + indexOffset]).split(" ")[0]);
                $('#CurrentRestroom_Zip').val($.trim(address[2 + indexOffset]).split(" ")[1]);

                //Parse coordinates
                var pos = AcTransitMap.FindMe.marker.getPosition();
                $('#CurrentRestroom_LatDec').val(pos.lat);
                $('#CurrentRestroom_LongDec').val(pos.lng);

                //Set route list based on the selected location
                getRestroomRoutesByLocation(pos.lat, pos.lng)
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_Address").blur(function () {
                validateAddress();
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_Address").keydown(function () {
                isAddressChange = true;
                $("#CurrentRestroom_City").val('');
                $("#CurrentRestroom_Zip").val('');
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_City").blur(function () {
                validateAddress();
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_City").keydown(function () {
                isAddressChange = true;
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_Zip").blur(function () {
                validateAddress();
            });

            //Retrieve address information for location if was edited or entered manually
            $("#CurrentRestroom_Zip").keydown(function () {
                isAddressChange = true;
            });

            //Any actions needed on submit?
            $('#btnCreate').click(function () {
                $("form#createRestroomForm").submit();
            });
        });

        function validateAddress() {
            if (isAddressChange && $("#CurrentRestroom_Address").val().length >= 6 && $("#CurrentRestroom_City").val().length >= 3) {
                var thisAddress = $('#CurrentRestroom_Address').val().concat(",").concat($('#CurrentRestroom_City').val()).concat(",").concat($('#CurrentRestroom_Zip').val());
                reverseGeocode(thisAddress, onAddressGeocoded);
            }
        }

        function onAddressGeocoded(address) {
            //Toggle flag
            isAddressChange = false;

            if (address !== null) {
                //Populate address information from geocoding
                $('#CurrentRestroom_Address').val(address.Address);
                $('#CurrentRestroom_City').val(address.City);
                $('#CurrentRestroom_State').val(address.State);
                $('#CurrentRestroom_Zip').val(address.Zip);
                $('#CurrentRestroom_LatDec').val(address.Lat);
                $('#CurrentRestroom_LongDec').val(address.Lng);

                //Retrieve route suggestions if valid address
                if (address.Lat !== null && address.Lng !== null)
                    getRestroomRoutesByLocation(address.Lat, address.Lng);
            }
        }

        function getRestroomRoutesByLocation(lat, long) {

            $('#suggestions_searching').show();
            $('#no_suggestions_found').hide();
            $('#RouteWaitDialog').modal('show');

            $.get(window.homeUrl + 'restroom/getroutesbylocation',
                { latitude: lat, longitude: long },
                function (data) {
                    console.log(data);
                    if (data !== null && data.length > 0) {
                        routeSuggest.clear();
                        routeSuggest.setValue(data);
                        $('#RouteWaitDialog').modal('hide');
                    }
                    else {
                        $('#suggestions_searching').hide();
                        $('#no_suggestions_found').show();
                    }
                })
                .fail(function () {
                    $('#RouteWaitDialog').modal('hide');
                    alert('There was an error retrieving route suggestions');
                    console.log('There was an error retrieving route suggestions');
                })
        }
    </script>
}