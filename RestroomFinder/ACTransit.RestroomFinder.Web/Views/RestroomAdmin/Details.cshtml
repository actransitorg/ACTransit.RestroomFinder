@using ACTransit.RestroomFinder.Web.Infrastructure

@model ACTransit.RestroomFinder.Web.Models.RestroomViewModel

@{
    var userIsAdmin = TokenAuthorizationHelper.HasAccess(TokenAuthorizationHelper.TokenAdmin);
    var userCanEdit = TokenAuthorizationHelper.HasAccess(TokenAuthorizationHelper.TokenEditor);

    ViewBag.Title = "View Restroom";
}

<h2>View Restroom</h2>

<div class="row">
    <hr />
    <div class="col-md-3">
        <dl class="dl-horizontal">

            <dt style="width:140px;">
                Type Of Restroom
            </dt>
            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.RestroomType)
            </dd>
            
            <dt style="width:140px;">
                Status
            </dt>
            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.StatusName)
            </dd>

            <dt style="width:140px;">
                Name
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.RestroomName)
            </dd>

            <dt style="width:140px;">
                Address
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.Address)
                @Html.HiddenFor(model => model.Address, new Dictionary<string, object> { { "data-val", false}, { "data-val-length", string.Empty }, { "data-val-length-max", 0 } })
            </dd>

            <dt style="width:140px;">
                City
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.City)
                @Html.HiddenFor(model => model.City, new Dictionary<string, object> { { "data-val", false }, { "data-val-length", string.Empty }, { "data-val-length-max", 0 } })
            </dd>

            <dt style="width:140px;">
                State
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.State)
                @Html.HiddenFor(model => model.State, new Dictionary<string, object> { { "data-val", false }, { "data-val-length", string.Empty }, { "data-val-length-max", 0 } })
            </dd>

            <dt style="width:140px;">
                Zip
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.Zip)
                @Html.HiddenFor(model => model.Zip, new Dictionary<string, object> { { "data-val", false }, { "data-val-length", string.Empty }, { "data-val-number", string.Empty}, { "data-val-length-max", 0 } })
            </dd>

            <dt style="width:140px;">
                Country
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.Country)
            </dd>

            <dt style="width:140px;">
                Has Driking Water
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.DrinkingWater)
            </dd>

            <dt style="width:140px;">
                Routes
            </dt>

            <dd style="width: 220px; text-align: left; word-break: break-all;">
                @Html.DisplayFor(model => model.SortedRoutes)
            </dd>

            <dt style="width:140px;">
                Restroom Availability
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.Hours)
            </dd>

            <dt style="width:140px;">
                Notes
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.Note)
            </dd>

            <dt style="width:140px;">
                Longitude
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.LongDec)
                @Html.HiddenFor(model => model.LongDec, new Dictionary<string, object> { { "data-val", false }, { "data-val-length", string.Empty }, { "data-val-length-max", 0 }, { "data-val-number", string.Empty } })
            </dd>

            <dt style="width:140px;">
                Latitude
            </dt>

            <dd style="width:220px;text-align:left">
                @Html.DisplayFor(model => model.LatDec)
                @Html.HiddenFor(model => model.LatDec, new Dictionary<string, object> { { "data-val", false }, { "data-val-length", string.Empty }, { "data-val-length-max", 0 }, { "data-val-number", string.Empty } })
            </dd>

        </dl>
    </div>
    <div class="col-md-8" style="border: 1px dashed red;">
        <div id="restroom-map-canvas" class="google-map" style="height:300px;"></div>
    </div>
</div>
<p>
    @{ if (userIsAdmin || userCanEdit)
       {
           @Html.ActionLink("Edit", "Edit", new { id = Model.RestroomId });
           @Html.Raw("&nbsp;|&nbsp;");
       }

        <a href="javascript:history.back();">Back to List</a>
    }
</p>


@section Scripts {

    <script src="@Url.Content("~/Scripts/gmap.viewer.js")"></script>

    <script>
        $(document).ready(function () {
            console.log('onReady');
            if (!("url" in window) && ("webkitURL" in window)) {
                window.URL = window.webkitURL;
            }

            mapOptions.startAddress = {
                streetAddress: $('#Address').val().concat(",").concat($('#City').val()).concat(",").concat($('#State').val()).concat(",").concat($('#Zip').val()),
                lat: $('#LatDec').val(),
                lng: $('#LongDec').val()
            }

            AcTransitMap.FindMe.start(mapOptions);
        });
    </script>
}


